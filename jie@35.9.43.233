cmake_minimum_required(VERSION 3.16)
project(EExApp VERSION 1.0.0 LANGUAGES CXX Python)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Set build type if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
endif()

# Set compiler flags
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    add_compile_options(-Wall -Wextra -Wpedantic -Wno-unused-parameter)
endif()

# Find required packages
find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
find_package(Pybind11 REQUIRED)
find_package(Torch REQUIRED)
find_package(GTest REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(Protobuf REQUIRED)
find_package(grpc REQUIRED)

# Add FlexRIC dependencies
if(NOT DEFINED ENV{FLEXRIC_ROOT})
    message(FATAL_ERROR "FLEXRIC_ROOT environment variable not set")
endif()

set(FLEXRIC_INCLUDE_DIR $ENV{FLEXRIC_ROOT}/include)
set(FLEXRIC_LIB_DIR $ENV{FLEXRIC_ROOT}/lib)

# Set Python paths
set(PYTHON_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/lib/python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}/site-packages)
set(PYTHON_SCRIPTS_DIR ${CMAKE_INSTALL_PREFIX}/bin)

# Add source files
set(SOURCES
    src/eexapp.cpp
    src/drl_trainer.cpp
    src/state_encoder.cpp
    src/mcma_ppo.cpp
    src/env.cpp
)

# Add header files
set(HEADERS
    include/eexapp.hpp
    include/drl_trainer.hpp
    include/state_encoder.hpp
    include/mcma_ppo.hpp
    include/env.hpp
)

# Create Python module
pybind11_add_module(eexapp_core MODULE
    ${SOURCES}
    ${HEADERS}
)

# Set include directories
target_include_directories(eexapp_core PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${FLEXRIC_INCLUDE_DIR}
    ${TORCH_INCLUDE_DIRS}
    ${PROTOBUF_INCLUDE_DIRS}
    ${GRPC_INCLUDE_DIRS}
)

# Link libraries
target_link_libraries(eexapp_core PRIVATE
    ${TORCH_LIBRARIES}
    ${PROTOBUF_LIBRARIES}
    ${GRPC_LIBRARIES}
    ${FLEXRIC_LIB_DIR}/libflexric.so
    OpenSSL::SSL
    OpenSSL::Crypto
    GTest::GTest
    GTest::Main
)

# Set output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Install targets
install(TARGETS eexapp_core
    LIBRARY DESTINATION ${PYTHON_INSTALL_DIR}
    RUNTIME DESTINATION ${PYTHON_INSTALL_DIR}
)

# Install Python scripts
install(DIRECTORY examples/xApp/python3/
    DESTINATION ${PYTHON_SCRIPTS_DIR}
    FILES_MATCHING PATTERN "*.py"
)

# Install configuration files
install(DIRECTORY config/
    DESTINATION ${CMAKE_INSTALL_PREFIX}/config
    FILES_MATCHING PATTERN "*.json"
)

# Install requirements.txt
install(FILES algorithms/requirements.txt
    DESTINATION ${CMAKE_INSTALL_PREFIX}
)

# Add tests
enable_testing()
add_subdirectory(tests)

# Add custom targets
add_custom_target(run_xapp
    COMMAND ${Python3_EXECUTABLE} ${PYTHON_SCRIPTS_DIR}/eexapp-main.py
    DEPENDS eexapp_core
)

add_custom_target(train
    COMMAND ${Python3_EXECUTABLE} ${PYTHON_SCRIPTS_DIR}/train.py
    DEPENDS eexapp_core
)

add_custom_target(test_xapp
    COMMAND ${Python3_EXECUTABLE} -m pytest tests/
    DEPENDS eexapp_core
)

# Add uninstall target
if(NOT TARGET uninstall)
    configure_file(
        "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
        IMMEDIATE @ONLY
    )
    add_custom_target(uninstall
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
    )
endif() 